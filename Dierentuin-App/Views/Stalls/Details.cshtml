@model Dierentuin_App.Models.Stall

@{
    ViewData["Title"] = "Stall Details";
    bool isDay = (bool)ViewData["IsDay"];
    string timeOfDay = isDay ? "day" : "night";

    var fedTimestamp = Model.LastFedAt?.ToUniversalTime();
    var fedUnix = fedTimestamp.HasValue
        ? ((DateTimeOffset)fedTimestamp.Value).ToUnixTimeMilliseconds()
        : 0;
}

<div class="my-4">
    <h1>Stall Details</h1>
    <hr />
    <dl class="row">
        <dt class="col-sm-3">@Html.DisplayNameFor(model => model.Name)</dt>
        <dd class="col-sm-9">@Html.DisplayFor(model => model.Name)</dd>

        <dt class="col-sm-3">@Html.DisplayNameFor(model => model.Climate)</dt>
        <dd class="col-sm-9">@Html.DisplayFor(model => model.Climate)</dd>

        <dt class="col-sm-3">@Html.DisplayNameFor(model => model.HabitatType)</dt>
        <dd class="col-sm-9">@Html.DisplayFor(model => model.HabitatType)</dd>

        <dt class="col-sm-3">@Html.DisplayNameFor(model => model.SecurityLevel)</dt>
        <dd class="col-sm-9">@Html.DisplayFor(model => model.SecurityLevel)</dd>

        <dt class="col-sm-3">@Html.DisplayNameFor(model => model.Size)</dt>
        <dd class="col-sm-9">@Model.Size.ToString("F2") m²</dd>
    </dl>
</div>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}

<div id="stall-container" class="stall-container">
    <h3>Animals in the Stall:</h3>
    @foreach (var animal in Model.Animals)
    {
        <div class="animal-item">
            <strong class="animal-name"
                    data-animal-id="@animal.Id"
                    data-category="@animal.Category"
                    data-prey="@animal.Prey"
                    data-activity-pattern="@animal.ActivityPattern"
                    data-fed-at="@fedUnix">
                @animal.Name
            </strong>
            <br />
            <span class="feeding-timer text-muted ms-2"></span>
            <br />
            Size: @animal.SpaceRequirement.ToString("F2") m²
        </div>
    }
</div>

@if (ViewData["CompositeInfo"] != null)
{
    <div class="alert alert-secondary mt-3">
        <pre>@ViewData["CompositeInfo"]</pre>
    </div>
}

<div class="my-4">
    <button type="button" class="btn btn-dark" id="feed-button" onclick="feedAnimals(@Model.Id)">Feed all animals</button>
    <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model?.Id">Edit</a>
    <a asp-action="Index">Back to List</a>
</div>

<div class="mt-5 text-end">
    <p class="text-end mt-5">It's currently @timeOfDay</p>
</div>

@section Scripts {
<script>
    const FEEDING_INTERVAL_MINUTES = 10;

    function updateFeedButtonState() {
        const now = Date.now();
        const button = document.getElementById("feed-button");

        // Get any animal's fed time (they all share the same stall-fed time)
        const anyAnimal = document.querySelector('.animal-name');
        const fedAtMs = anyAnimal ? parseInt(anyAnimal.getAttribute('data-fed-at')) || 0 : 0;
        const diffMinutes = (now - fedAtMs) / 60000;

        if (fedAtMs === 0 || diffMinutes >= FEEDING_INTERVAL_MINUTES) {
            button.disabled = false;
        } else {
            button.disabled = true;
            const remaining = Math.ceil(FEEDING_INTERVAL_MINUTES - diffMinutes);
            button.textContent = `Feed all animals (available in ${remaining} min${remaining > 1 ? 's' : ''})`;
        }
    }

    function feedAnimals(stallId) {
        fetch('/Stalls/FeedAllAnimals', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `stallId=${stallId}`
        })
        .then(async response => {
            const data = await response.json();

            // Always update animal timestamps if provided
            if (data.fedAt) {
                document.querySelectorAll('.animal-name').forEach(animal => {
                    animal.setAttribute('data-fed-at', data.fedAt);
                });
            }

            updateFeedButtonState();

            if (!response.ok || !data.success) {
                throw new Error(data.message || "Feeding failed");
            }

            alert("Animals fed successfully!");
        })
        .catch(err => {
            alert("Error: " + err.message);
        });
    }

    // Initial check
    updateFeedButtonState();
    // Re-check every 30s
    setInterval(updateFeedButtonState, 30000);
</script>
}